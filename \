import random
class Perceptron():

    # Since we need to correlate weights and inputs to specific words, 
    # we will use a counter for the weights instead of a vector
    def __init__(self, learningRate, featureVectorIn={}):
        self.featureVector = featureVectorIn # counter
        self.weightVector = {} # counter
        self.n = learningRate

    # Need to init perceptron with set of attributes and their freq from ALL of the emails (spam and ham)
    def initFeatures(self,trainedBoW):
        self.featureVector = trainedBoW
        self.featureVector["__BIAS__"] = 1 # setting a W0 bias
    
    # Initialize weights to size of input vector, init to 0.01 instead of random
    def initWeights(self):
        self.weightVector = {x:random.uniform(-.25,.25) for x in self.featureVector.keys()}
        self.weightVector["__BIAS__"] = 1 #need to ensure always == 1

    #given an input attr counter from a test email, classify it 
    def classify(self, inputDict):
        wxArr = []
        for key in inputDict.keys():
            try:
                wxArr.append(self.featureVector[key]*self.weightVector[key])
                #print("1", end = "")
            except KeyError as e:
                # Note: KeyErrors should be normal during TESTING but not TRAINING
                #print("KEY {} not found".format(e))            
                #print("\300[91m 0 \033[0m", end = "")
                pass
        #Should be able to just replace with 1
        wxArr.append(1)
        res = sum(wxArr)
        #print("{}".format(res))
        #print("{} = {}".format(wxArr,res))
        #print("{:.3f}".format(res))
        return 1 if res>0 else -1
           
    def train(self, target, inputDict):
        '''(int, counter) -> None
            Trains the perceptron on a new single email, provided as an inputDict.

            Takes in target (class value, so 1 for ham and -1 for spam) and
            counter of a single training email and trains the perceptron 
            using the training rule wi <- wi + delta(wi), where delta(wi) 
            = n(t-o)xi. n is learning rate, (t-o) is the difference between
            perceptron c(vector(X)) output and target value, and xi is the specific attr
            we are updating the weight wi for.
        '''
        o = self.classify(inputDict) # pre-calc, doesn't change per email
        for key in inputDict.keys():
            try:
                deltaWI = self.n * ( target - o ) * self.featureVector[key]
                if self.featureVector[key]:
                    print("delta:{:.5f}, targ:{}, o:{}, fV:{}".format(deltaWI, target, o, self.featureVector[key]))
                self.weightVector[key] += deltaWI
            except KeyError as e:
                #key not found? Should not happen since Perceptron attr are set before training
                #print("KEY {} not found".format(e))            
                pass 
        #print("{}\n".format(self.weightVector))
